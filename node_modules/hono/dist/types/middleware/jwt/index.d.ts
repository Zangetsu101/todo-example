import type { MiddlewareHandler } from '../../types';
import '../../context';
import type { SignatureAlgorithm } from '../../utils/jwt/jwa';
declare module '../../context' {
    interface ContextVariableMap {
        jwtPayload: any;
    }
}
export declare const jwt: (options: {
    secret: string;
    cookie?: string;
    alg?: SignatureAlgorithm;
}) => MiddlewareHandler;
export declare const verify: (token: string, publicKey: import("../../utils/jwt/jws").SignatureKey, alg?: "HS256" | "HS384" | "HS512" | "RS256" | "RS384" | "RS512" | "PS256" | "PS384" | "PS512" | "ES256" | "ES384" | "ES512" | "EdDSA") => Promise<any>;
export declare const decode: (token: string) => {
    header: any;
    payload: any;
};
export declare const sign: (payload: import("../../utils/jwt/types").JWTPayload, privateKey: import("../../utils/jwt/jws").SignatureKey, alg?: "HS256" | "HS384" | "HS512" | "RS256" | "RS384" | "RS512" | "PS256" | "PS384" | "PS512" | "ES256" | "ES384" | "ES512" | "EdDSA") => Promise<string>;
