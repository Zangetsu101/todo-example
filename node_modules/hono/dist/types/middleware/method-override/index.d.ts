import type { Hono } from '../../hono';
import type { MiddlewareHandler } from '../../types';
type MethodOverrideOptions = {
    app: Hono<any, any, any>;
} & ({
    form?: string;
    header?: never;
    query?: never;
} | {
    form?: never;
    header: string;
    query?: never;
} | {
    form?: never;
    header?: never;
    query: string;
});
/**
 * Method Override Middleware
 *
 * @example
 * // with form input method
 * const app = new Hono()
 * app.use('/books/*', methodOverride({ app })) // the default `form` value is `_method`
 * app.use('/authors/*', methodOverride({ app, form: 'method' }))
 *
 * @example
 * // with custom header
 * app.use('/books/*', methodOverride({ app, header: 'X-HTTP-METHOD-OVERRIDE' }))
 *
 * @example
 * // with query parameter
 * app.use('/books/*', methodOverride({ app, query: '_method' }))
 */
export declare const methodOverride: (options: MethodOverrideOptions) => MiddlewareHandler;
export {};
