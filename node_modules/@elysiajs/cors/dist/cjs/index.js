"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cors = void 0;
const elysia_1 = require("elysia");
const processOrigin = (origin, request, from) => {
    if (Array.isArray(origin))
        return origin.some((o) => processOrigin(o, request, from));
    switch (typeof origin) {
        case 'string':
            const protocolStart = from.indexOf('://');
            if (protocolStart !== -1)
                from = from.slice(protocolStart + 3);
            const trailingSlash = from.indexOf('/', 0);
            if (trailingSlash !== -1)
                from = from.slice(trailingSlash);
            return origin === from;
        case 'function':
            return origin(request) === true;
        case 'object':
            if (origin instanceof RegExp)
                return origin.test(from);
    }
    return false;
};
const cors = (config) => {
    let { aot = true, origin = '*', methods = '*', allowedHeaders = '*', exposedHeaders = '*', credentials = true, maxAge = 5, preflight = true } = config ?? {};
    if (Array.isArray(allowedHeaders))
        allowedHeaders = allowedHeaders.join(', ');
    if (Array.isArray(exposedHeaders))
        exposedHeaders = exposedHeaders.join(', ');
    const origins = typeof origin === 'boolean'
        ? undefined
        : Array.isArray(origin)
            ? origin
            : [origin];
    const app = new elysia_1.Elysia({
        name: '@elysiajs/cors',
        seed: config,
        aot
    });
    const anyOrigin = origins?.some((o) => o === '*');
    const handleOrigin = (set, request) => {
        if (origin === true) {
            set.headers['Vary'] = '*';
            set.headers['Access-Control-Allow-Origin'] =
                request.headers.get('Origin') || '*';
            return;
        }
        if (anyOrigin) {
            set.headers['Vary'] = '*';
            set.headers['Access-Control-Allow-Origin'] = '*';
            return;
        }
        if (!origins?.length)
            return;
        const headers = [];
        if (origins.length) {
            const from = request.headers.get('Origin') ?? '';
            for (let i = 0; i < origins.length; i++) {
                const value = processOrigin(origins[i], request, from);
                if (value === true) {
                    set.headers['Vary'] = origin ? 'Origin' : '*';
                    set.headers['Access-Control-Allow-Origin'] = from || '*';
                    return;
                }
                if (value)
                    headers.push(value);
            }
        }
        set.headers['Vary'] = 'Origin';
        set.headers['Access-Control-Allow-Origin'] = headers.join(', ');
    };
    const handleMethod = (set, method) => {
        if (methods === true)
            return (set.headers['Access-Control-Allow-Methods'] = method ?? '*');
        if (methods === false || !methods?.length)
            return;
        if (methods === '*')
            return (set.headers['Access-Control-Allow-Methods'] = '*');
        if (!Array.isArray(methods))
            return (set.headers['Access-Control-Allow-Methods'] = methods);
        set.headers['Access-Control-Allow-Methods'] = methods.join(', ');
    };
    if (preflight)
        app.options('/', ({ set, request }) => {
            handleOrigin(set, request);
            handleMethod(set, request.method);
            if (allowedHeaders.length)
                set.headers['Access-Control-Allow-Headers'] =
                    allowedHeaders;
            if (exposedHeaders.length)
                set.headers['Access-Control-Expose-Headers'] =
                    exposedHeaders;
            if (maxAge)
                set.headers['Access-Control-Max-Age'] = maxAge.toString();
            return new Response(null, {
                status: 204
            });
        }).options('/*', ({ set, request }) => {
            handleOrigin(set, request);
            handleMethod(set, request.method);
            if (allowedHeaders.length)
                set.headers['Access-Control-Allow-Headers'] =
                    allowedHeaders;
            if (exposedHeaders.length)
                set.headers['Access-Control-Expose-Headers'] =
                    exposedHeaders;
            if (maxAge)
                set.headers['Access-Control-Max-Age'] = maxAge.toString();
            return new Response(null, {
                status: 204
            });
        });
    const defaultHeaders = {
        'Access-Control-Allow-Headers': allowedHeaders,
        'Access-Control-Exposed-Headers': exposedHeaders
    };
    if (credentials === true)
        defaultHeaders['Access-Control-Allow-Credentials'] = 'true';
    return app.headers(defaultHeaders).onRequest(({ set, request }) => {
        handleOrigin(set, request);
        handleMethod(set, request.method);
        if (allowedHeaders.length)
            set.headers['Access-Control-Allow-Headers'] =
                allowedHeaders;
        if (exposedHeaders.length)
            set.headers['Access-Control-Expose-Headers'] =
                exposedHeaders;
    });
};
exports.cors = cors;
exports.default = exports.cors;
