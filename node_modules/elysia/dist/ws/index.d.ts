/// <reference types="bun-types" />
/// <reference types="bun-types" />
import type { ServerWebSocket, WebSocketHandler } from 'bun';
import type { TSchema } from '@sinclair/typebox';
import type { TypeCheck } from '@sinclair/typebox/compiler';
import type { Context } from '../context';
import type { SingletonBase, RouteSchema } from '../types';
export declare const websocket: WebSocketHandler<any>;
export declare class ElysiaWS<WS extends ServerWebSocket<{
    id?: string;
    validator?: TypeCheck<TSchema>;
}>, Route extends RouteSchema = RouteSchema, Singleton extends SingletonBase = {
    decorator: {};
    store: {};
    derive: {};
    resolve: {};
}> {
    raw: WS;
    data: Context<Route, Singleton>;
    validator?: TypeCheck<TSchema>;
    constructor(raw: WS, data: Context<Route, Singleton>);
    get id(): string;
    set id(newID: string);
    get publish(): (topic: string, data?: Route['response'], compress?: boolean) => this;
    get send(): (data: Route['response']) => this;
    get subscribe(): (room: string) => this;
    get unsubscribe(): (room: string) => this;
    get cork(): (callback: () => this) => this;
    get close(): () => this;
    get terminate(): () => void;
    get isSubscribed(): (topic: string) => boolean;
    get remoteAddress(): string;
}
